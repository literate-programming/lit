package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/literate-programming/lit"
)

var (
	version = "dev"
	commit  = "none"
	date    = "unknown"
)

func usage() {
	fmt.Printf("\n")
	fmt.Printf("  +--------+\n")
	fmt.Printf("  | ---    |\n")
	fmt.Printf("  | ---    |  lit %s - literate preprocessor\n", version)
	fmt.Printf("  |   ---  |  --- ------ - ---------------------\n")
	fmt.Printf("  |   ---  |\n")
	fmt.Printf("  | ---    |\n")
	fmt.Printf("  +--------+\n")
	fmt.Printf("\n")
	fmt.Printf("  USAGE: lit [flags] <in> <out>\n\n")
	fmt.Printf("  FLAGS:\n")
	flag.PrintDefaults()
	fmt.Printf("\n  EXAMPLE:\n")
	fmt.Printf("  $ lit foo.go.md foo.go\n\n")
	os.Exit(0)
}

func main() {
	flagCommentStyle := flag.String("c", "//", "the comment style")
	flagGeneratedInfo := flag.Bool("i", true, "add an information that the code was generated at the top of the file")
	flagNoDocs := flag.Bool("n", false, "cut the docs from the final result")
	flagVersion := flag.Bool("v", false, "print the version and exit")

	flag.Usage = usage
	flag.Parse()

	flagArgs := flag.Args()
	totalArgs := flag.NArg()

	if *flagVersion {
		fmt.Printf("version:  %s\n", version)
		fmt.Printf("commit:   %s\n", commit)
		fmt.Printf("built at: %s\n", date)
		os.Exit(0)
	}
	if totalArgs == 0 {
		usage()
	}

	var err error
	var inputData []byte

	if totalArgs >= 1 {
		inputData, err = ioutil.ReadFile(flagArgs[0])
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
	}

	transformed := lit.Transform(inputData, []byte(*flagCommentStyle+" "), *flagNoDocs)

	if totalArgs == 2 {
		outPath := flagArgs[1]
		var outInfo []byte
		if *flagGeneratedInfo {
			outInfo = []byte("// GENERATED BY LIT v" + version + "; DO NOT EDIT\n\n")
		}
		err := ioutil.WriteFile(outPath, append(outInfo, transformed...), 0777)
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
	} else {
		fmt.Println(string(transformed))
	}

}
